version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: zapFlow_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: ${ALLOW_ANONYMOUS_LOGIN}

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      ALLOW_PLAINTEXT_LISTENER: ${ALLOW_PLAINTEXT_LISTENER}
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10

  hooks:
    build:
      context: ./hooks
    container_name: hooks
    restart: always
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: sh -c "npx prisma generate && node dist/index.js"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend
    image: zapflow-backend 
    container_name: primary-backend
    restart: always
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      HOOKS_URL: ${HOOKS_URL}
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "npx prisma migrate deploy && npx prisma generate && node dist/api/index.js"

  scheduler:
    image: zapflow-backend 
    container_name: scheduler
    restart: always
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: sh -c "npx prisma generate && node dist/scheduler/index.js"

  processor:
    build:
      context: ./processor
    container_name: processor
    restart: always
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      KAFKA_BROKER: "kafka:29092"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      api:
        condition: service_started
    command: sh -c "npx prisma generate && node dist/index.js"

  worker:
    build:
      context: ./worker
    container_name: worker
    restart: always
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      KAFKA_BROKER: "kafka:29092" 
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      api:
        condition: service_started
    command: sh -c "npx prisma generate && node dist/index.js"
  
  studio:
    image: zapflow-backend 
    container_name: studio
    restart: always
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
    ports:
      - "5555:5555"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: sh -c "npx prisma studio"

volumes:
  postgres_data: {}